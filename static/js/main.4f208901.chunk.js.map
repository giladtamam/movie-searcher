{"version":3,"sources":["api.js","components/SearchBar.js","components/Movie.js","components/App.js","reportWebVitals.js","index.js"],"names":["API_KEY","fetchMovies","term","a","fetch","then","data","json","fetchMovie","movieId","SearchBar","props","onMoviesChange","onClearClick","useState","setTerm","isLoading","setLoading","searchChange","useCallback","event","value","target","getMovies","Search","Error","clearResults","className","type","onChange","placeholder","onClick","Movie","movie","Poster","Title","imdbID","isExpanded","setExpanded","movieDetails","setMovieDetails","onMovieClick","mov","fetchMovieDetails","alt","src","Genre","Director","Actors","Year","App","movies","setMovies","errorMessage","setErrorMessage","clearMovies","error","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4f208901.chunk.js","sourcesContent":["const API_KEY = '1b704b01';\n\nexport async function fetchMovies(term) {\n  return await fetch(\n    `https://www.omdbapi.com/?s=${term}&apikey=${API_KEY}`,\n  ).then(data => data.json());\n}\n\nexport async function fetchMovie(movieId) {\n  return await fetch(\n    `https://www.omdbapi.com/?i=${movieId}&apikey=${API_KEY}`,\n  ).then(data => data.json());\n}\n","import { useCallback, useState } from 'react';\nimport { fetchMovies } from '../api';\nimport './SearchBar.css';\n\nfunction SearchBar (props) {\n    const { onMoviesChange, onClearClick } = props;\n    const [term, setTerm ] = useState('');\n    const [isLoading, setLoading] = useState(false);\n\n    const searchChange = useCallback((event) => {\n        const { value } = event.target;\n        setTerm(value);\n    }, [setTerm]);\n\n    const getMovies = useCallback(async () => {\n        setLoading(true);\n        const { Search, Error } = await fetchMovies(term);\n        setLoading(false);\n        onMoviesChange(Search, Error);\n    }, [term, onMoviesChange, setLoading]);\n\n    const clearResults = useCallback(() => {\n        setTerm('');\n        onClearClick();\n    }, [setTerm, onClearClick]);\n\n    return (\n        <div>\n            <div className=\"search\">\n                <input type=\"text\" value={ term } onChange={ searchChange } className=\"searchTerm\" placeholder=\"Search for a movie...\" />\n                <button onClick={ getMovies } className=\"searchButton\">\n                Search\n            </button>\n            <button onClick={ clearResults } className=\"searchButton\">\n                Clear\n            </button>\n            </div>\n            { isLoading && <div>Loading...</div> }\n        </div>    \n    )\n}\n\nexport default SearchBar;","import { useCallback, useState } from 'react';\nimport { fetchMovie } from '../api';\nimport './Movie.css';\n\nfunction Movie (props) {\n    const { movie: { Poster, Title, imdbID } } = props;\n    const [isExpanded, setExpanded] = useState(false);\n    const [movieDetails, setMovieDetails] = useState();\n    const [isLoading, setLoading] = useState(false);\n\n    const onMovieClick = useCallback(() => {\n        const fetchMovieDetails = async () => {\n            setLoading(true);\n            const mov = await fetchMovie(imdbID);\n            setLoading(false);\n            setMovieDetails(mov);\n        }\n\n        if (!movieDetails && !isLoading) {\n            fetchMovieDetails();\n        }\n        setExpanded(!isExpanded);\n\n    }, [imdbID, isExpanded, isLoading, movieDetails, setExpanded, setMovieDetails, setLoading]);\n\n    return (\n        <div className=\"movie\">\n            <img className=\"movie-image\" alt=\"\" src={Poster === 'N/A' ? 'movie-placeholder.jpeg' : Poster} />\n            <div className={ `footer ${isExpanded ? 'expanded': ''}` }>\n                <div className=\"movie-footer\">\n                    <span>{Title}</span>\n                    <button onClick={ onMovieClick } className=\"expand-button\">{ isExpanded ? '-' : '+' }</button>\n                </div>\n                { isExpanded && isLoading && <div>Loading...</div> }\n                {\n                isExpanded && movieDetails && (\n                    <div>\n                        <div className=\"movie-detail\"><b>Genre:</b> {movieDetails.Genre} </div>\n                        <div className=\"movie-detail\"><b>Director:</b> {movieDetails.Director} </div>\n                        <div className=\"movie-detail\"><b>Actors:</b> {movieDetails.Actors} </div>\n                        <div className=\"movie-detail\"><b>Year:</b> {movieDetails.Year} </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Movie;","import { useCallback, useState } from 'react';\nimport SearchBar from './SearchBar';\nimport Movie from './Movie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  \n  const onMoviesChange = (movies = [], error = '') => {\n      setErrorMessage(error);\n      setMovies(movies);\n  }\n\n  const clearMovies = useCallback(() => {\n    setMovies([]);\n    setErrorMessage('');\n  }, [setMovies]);\n\n  return (\n    <div className=\"App\">\n        <main>\n          <h1>Movie Searcher</h1>\n            <SearchBar onClearClick={ clearMovies } onMoviesChange={onMoviesChange}/>\n            { errorMessage && <div>{ errorMessage }</div> }\n            <div className=\"movie-list\">\n                {movies.map(movie =>\n                    (\n                        <Movie movie={movie} key={movie.imdbID}/>\n                    ))\n                }\n            </div>\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}