{"version":3,"sources":["api.js","components/SearchBar.js","components/Movie.js","components/App.js","reportWebVitals.js","index.js"],"names":["API_KEY","fetchMovies","term","page","a","fetch","then","data","json","fetchMovie","movieId","SearchBar","props","onSearchClick","onClearClick","useState","setTerm","searchChange","useCallback","event","value","target","getMovies","clearResults","className","type","onChange","placeholder","onClick","Movie","movie","Poster","Title","imdbID","isExpanded","setExpanded","movieDetails","setMovieDetails","isLoading","setLoading","onMovieClick","mov","fetchMovieDetails","alt","src","Genre","Director","Actors","Year","App","movies","setMovies","totalMovies","setTotalMovies","errorMessage","setErrorMessage","setPage","isLoadMore","setLoadMore","termRef","useRef","hasMore","Math","ceil","currentMovies","current","Search","Error","totalResults","clearMovies","searchClick","loadMore","map","disabled","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.544716a3.chunk.js","sourcesContent":["const API_KEY = '1b704b01';\n\nexport async function fetchMovies(term, page) {\n  return await fetch(\n    `https://www.omdbapi.com/?s=${term}&page=${page}&apikey=${API_KEY}`,\n  ).then(data => data.json());\n}\n\nexport async function fetchMovie(movieId) {\n  return await fetch(\n    `https://www.omdbapi.com/?i=${movieId}&apikey=${API_KEY}`,\n  ).then(data => data.json());\n}\n","import { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchBar.css';\n\nfunction SearchBar (props) {\n    const { onSearchClick, onClearClick } = props;\n    const [term, setTerm ] = useState('');\n\n    const searchChange = useCallback((event) => {\n        const { value } = event.target;\n        setTerm(value);\n    }, [setTerm]);\n\n    const getMovies = useCallback(() => {\n        onSearchClick(term);\n    }, [term, onSearchClick]);\n\n    const clearResults = useCallback(() => {\n        setTerm('');\n        onClearClick();\n    }, [setTerm, onClearClick]);\n\n    return (\n        <div className=\"search\">\n            <input type=\"text\" value={ term } onChange={ searchChange } className=\"searchTerm\" placeholder=\"Search for a movie...\" />\n            <button onClick={ getMovies } className=\"searchButton\">Search</button>\n            <button onClick={ clearResults } className=\"searchButton\">Clear</button>\n        </div>  \n    )\n}\n\nSearchBar.propTypes = {\n    onSearchClick: PropTypes.func.isRequired,\n    onClearClick: PropTypes.func.isRequired\n};\n\nexport default SearchBar;","import { useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { fetchMovie } from '../api';\nimport './Movie.css';\n\nconst IMAGE_PLACEHOLDER = 'https://cinemaone.net/images/movie_placeholder.png'\nfunction Movie (props) {\n    const { movie: { Poster, Title, imdbID } } = props;\n    const [isExpanded, setExpanded] = useState(false);\n    const [movieDetails, setMovieDetails] = useState();\n    const [isLoading, setLoading] = useState(false);\n\n    const onMovieClick = useCallback(() => {\n        const fetchMovieDetails = async () => {\n            setLoading(true);\n            const mov = await fetchMovie(imdbID);\n            setLoading(false);\n            setMovieDetails(mov);\n        }\n\n        if (!movieDetails && !isLoading) {\n            fetchMovieDetails();\n        }\n        setExpanded(!isExpanded);\n\n    }, [imdbID, isExpanded, isLoading, movieDetails, setExpanded, setMovieDetails, setLoading]);\n\n    return (\n        <div className=\"movie\">\n            <img className=\"movie-image\" alt=\"\" src={Poster === 'N/A' ? IMAGE_PLACEHOLDER : Poster} />\n            <div className={ `footer ${isExpanded ? 'expanded': ''}` }>\n                <div className=\"movie-footer\">\n                    <span>{Title}</span>\n                    <button onClick={ onMovieClick } className=\"expand-button\">{ isExpanded ? '-' : '+' }</button>\n                </div>\n                { isExpanded && isLoading && <div>Loading...</div> }\n                { isExpanded && movieDetails && (\n                    <div>\n                        <div className=\"movie-detail\"><b>Genre:</b> {movieDetails.Genre} </div>\n                        <div className=\"movie-detail\"><b>Director:</b> {movieDetails.Director} </div>\n                        <div className=\"movie-detail\"><b>Actors:</b> {movieDetails.Actors} </div>\n                        <div className=\"movie-detail\"><b>Year:</b> {movieDetails.Year} </div>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nMovie.propTypes = {\n    movie: PropTypes.object.isRequired\n};\n\nexport default Movie;","import { useCallback, useRef, useState } from 'react';\nimport { fetchMovies } from '../api';\nimport SearchBar from './SearchBar';\nimport Movie from './Movie';\nimport './App.css';\n\nfunction App() {\n    const [movies, setMovies] = useState([]);\n    const [totalMovies, setTotalMovies] = useState(0);\n    const [errorMessage, setErrorMessage] = useState('');\n    const [page, setPage] = useState(1);\n    const [isLoading, setLoading] = useState(false);\n    const [isLoadMore, setLoadMore] = useState(false);\n    const termRef = useRef('');\n    const hasMore = page < Math.ceil(totalMovies / 10);\n\n    const getMovies = useCallback(async (currentMovies = [], page = 1) => {\n        const { Search = [], Error, totalResults } = await fetchMovies(termRef.current, page);\n        setErrorMessage(Error);\n        setTotalMovies(totalResults);\n        setMovies([...currentMovies, ...Search]);\n    }, [setMovies, setTotalMovies, setErrorMessage]);\n\n    const clearMovies = useCallback(() => {\n        setErrorMessage('');\n    }, [setErrorMessage]);\n\n    const searchClick = useCallback(async (term) => {\n        termRef.current = term;\n        setLoading(true);\n        await getMovies();\n        setLoading(false);\n    }, [setLoading, getMovies]);\n\n    const loadMore = useCallback(async () => {\n        setLoadMore(true);\n        await getMovies(movies, page + 1);\n        setLoadMore(false);\n        setPage(page + 1);\n    }, [page, movies, getMovies]);\n  \n  return (\n    <div className=\"App\">\n        <main>\n            <h1>Movie Searcher</h1>\n            <SearchBar onClearClick={ clearMovies } onSearchClick={searchClick}/>\n            { totalMovies > 0 && <div>Total Results: {totalMovies} </div> }\n            { isLoading && <div>Loading...</div> }\n            <div>{ errorMessage }</div>\n            <div className=\"movie-list\">\n                {movies.map(movie => <Movie movie={movie} key={movie.imdbID}/>)}\n            </div>\n            { hasMore && (\n                <button disabled={isLoadMore} className=\"load-more\" onClick={loadMore}>\n                    { isLoadMore ? 'Loading' : 'Load More' }\n                </button> \n            )}\n        </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}